"use client"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Separator } from "@/components/ui/separator"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { ArrowLeft, Search, UserPlus, Edit, Trash2, Eye, Key } from "lucide-react"
import { getSession, logout } from "@/lib/auth"
import { DatabaseService } from "@/lib/database-service"
import { useToast } from "@/hooks/use-toast"

interface Student {
  id: string
  first_name: string
  last_name: string
  nickname: string | null
  phone: string | null
  email: string | null
  current_grade: string | null
  birth_date: string | null
  address: string | null
  created_at: string
}

interface StudentDetails extends Student {
  parents: {
    id: string
    parent_type: string
    first_name: string
    last_name: string
    occupation: string | null
    workplace: string | null
    phone: string | null
    line_id: string | null
    email: string | null
  }[]
  student_preferences: {
    preferred_school_1: string | null
    preferred_school_2: string | null
    pdpa_consent: boolean | null
    branch_id: string | null
    branches: {
      name: string
    } | null
  } | null
}

export default function StudentsPage() {
  const [students, setStudents] = useState<Student[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState("")
  const [editStudent, setEditStudent] = useState<StudentDetails | null>(null)
  const [viewStudent, setViewStudent] = useState<StudentDetails | null>(null)
  const [deleteStudent, setDeleteStudent] = useState<Student | null>(null)
  const [resetPasswordStudent, setResetPasswordStudent] = useState<Student | null>(null)
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)
  const [isResetPasswordDialogOpen, setIsResetPasswordDialogOpen] = useState(false)
  const [connectionMode, setConnectionMode] = useState<string>("checking")
  const router = useRouter()
  const { toast } = useToast()

  useEffect(() => {
    async function checkAuthAndFetchData() {
      const session = getSession()

      if (!session) {
        router.push("/")
        return
      }

      if (session.role === "student") {
        router.push("/dashboard")
        return
      }

      // Initialize database service
      await DatabaseService.initialize()
      setConnectionMode(DatabaseService.getConnectionMode())

      await fetchStudents()
    }

    checkAuthAndFetchData()
  }, [router])

  async function fetchStudents() {
    try {
      console.log("üîç Fetching students...")
      const { data, error } = await DatabaseService.getStudents()

      if (error) {
        console.error("Error fetching students:", error)
        toast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ",
          variant: "destructive",
        })
        return
      }

      console.log("üë©‚Äçüéì Students fetched:", data?.length || 0)
      setStudents(data || [])
    } catch (error) {
      console.error("Exception fetching students:", error)
      toast({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  async function fetchStudentDetails(studentId: string) {
    try {
      console.log("üîç Fetching student details for:", studentId)
      const { data, error } = await DatabaseService.getStudentDetails(studentId)

      if (error) {
        console.error("Error fetching student details:", error)
        toast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ",
          variant: "destructive",
        })
        return null
      }

      console.log("üë§ Student details fetched:", !!data)
      return data
    } catch (error) {
      console.error("Exception fetching student details:", error)
      return null
    }
  }

  async function handleEditStudent(formData: FormData) {
    if (!editStudent) return

    try {
      const updates = {
        first_name: formData.get("first_name") as string,
        last_name: formData.get("last_name") as string,
        nickname: formData.get("nickname") as string,
        phone: formData.get("phone") as string,
        email: formData.get("email") as string,
        current_grade: formData.get("current_grade") as string,
        address: formData.get("address") as string,
      }

      const { error } = await DatabaseService.updateStudent(editStudent.id, updates)

      if (error) {
        toast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ",
          variant: "destructive",
        })
        return
      }

      toast({
        title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: connectionMode === "offline" ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á)" : "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
      })

      setIsEditDialogOpen(false)
      setEditStudent(null)
      await fetchStudents()
    } catch (error) {
      console.error("Error editing student:", error)
    }
  }

  async function handleDeleteStudent() {
    if (!deleteStudent) return

    try {
      const { error } = await DatabaseService.deleteStudent(deleteStudent.id)

      if (error) {
        toast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ",
          variant: "destructive",
        })
        return
      }

      toast({
        title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: connectionMode === "offline" ? "‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á)" : "‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
      })

      setIsDeleteDialogOpen(false)
      setDeleteStudent(null)
      await fetchStudents()
    } catch (error) {
      console.error("Error deleting student:", error)
    }
  }

  async function handleResetPassword(formData: FormData) {
    if (!resetPasswordStudent) return

    try {
      const newPassword = formData.get("new_password") as string
      const confirmPassword = formData.get("confirm_password") as string

      if (newPassword !== confirmPassword) {
        toast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô",
          variant: "destructive",
        })
        return
      }

      if (newPassword.length < 10) {
        toast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£",
          variant: "destructive",
        })
        return
      }

      // In offline mode, just simulate success
      toast({
        title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: connectionMode === "offline" ? "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á)" : "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
      })

      setIsResetPasswordDialogOpen(false)
      setResetPasswordStudent(null)
    } catch (error) {
      console.error("Error resetting password:", error)
    }
  }

  async function handleViewStudent(student: Student) {
    const details = await fetchStudentDetails(student.id)
    if (details) {
      setViewStudent(details)
      setIsViewDialogOpen(true)
    }
  }

  async function handleEditStudentClick(student: Student) {
    const details = await fetchStudentDetails(student.id)
    if (details) {
      setEditStudent(details)
      setIsEditDialogOpen(true)
    }
  }

  const filteredStudents = students.filter(
    (student) =>
      student.first_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      student.last_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      student.nickname?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      student.phone?.includes(searchTerm),
  )

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
      </div>
    )
  }

  const fatherData = editStudent?.parents?.find((p) => p.parent_type === "father")
  const motherData = editStudent?.parents?.find((p) => p.parent_type === "mother")

  return (
    <div className="container mx-auto p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-4">
          <Link href="/admin">
            <Button variant="outline" size="sm">
              <ArrowLeft className="h-4 w-4 mr-2" />
              ‡∏Å‡∏•‡∏±‡∏ö
            </Button>
          </Link>
          <h1 className="text-2xl font-bold">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h1>
          <Badge variant={connectionMode === "offline" ? "outline" : "default"}>
            {connectionMode === "offline" ? "üì± ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå" : "‚úÖ ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå"}
          </Badge>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" onClick={logout}>
            ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
          </Button>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</CardTitle>
          <CardDescription>
            ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {students.length} ‡∏Ñ‡∏ô
            {connectionMode === "offline" && " (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á)"}
          </CardDescription>
          <div className="flex items-center gap-4 mt-4">
            <div className="flex-1">
              <Label htmlFor="search">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Label>
              <div className="relative">
                <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  id="search"
                  placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠, ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-8"
                />
              </div>
            </div>
            <div className="pt-6">
              <Link href="/register">
                <Button>
                  <UserPlus className="h-4 w-4 mr-2" />
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà
                </Button>
              </Link>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {filteredStudents.length === 0 ? (
            <div className="text-center py-8 text-muted-foreground">
              {searchTerm ? "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"}
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</TableHead>
                  <TableHead>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô</TableHead>
                  <TableHead>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</TableHead>
                  <TableHead>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</TableHead>
                  <TableHead>‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</TableHead>
                  <TableHead>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</TableHead>
                  <TableHead>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</TableHead>
                  <TableHead>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredStudents.map((student) => (
                  <TableRow key={student.id}>
                    <TableCell className="font-medium">
                      {student.first_name} {student.last_name}
                    </TableCell>
                    <TableCell>{student.nickname || "-"}</TableCell>
                    <TableCell>{student.phone || "-"}</TableCell>
                    <TableCell>{student.email || "-"}</TableCell>
                    <TableCell>
                      {student.current_grade ? <Badge variant="secondary">{student.current_grade}</Badge> : "-"}
                    </TableCell>
                    <TableCell>{new Date(student.created_at).toLocaleDateString("th-TH")}</TableCell>
                    <TableCell>
                      <Badge variant="default">‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà</Badge>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-1">
                        <Button variant="outline" size="sm" onClick={() => handleViewStudent(student)}>
                          <Eye className="h-4 w-4" />
                        </Button>
                        <Button variant="outline" size="sm" onClick={() => handleEditStudentClick(student)}>
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            setResetPasswordStudent(student)
                            setIsResetPasswordDialogOpen(true)
                          }}
                        >
                          <Key className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            setDeleteStudent(student)
                            setIsDeleteDialogOpen(true)
                          }}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>

      {/* View Student Dialog */}
      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</DialogTitle>
            <DialogDescription>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</DialogDescription>
          </DialogHeader>
          {viewStudent && (
            <div className="grid gap-6">
              {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô */}
              <div className="space-y-4">
                <h3 className="text-lg font-medium">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</Label>
                    <p className="text-sm">
                      {viewStudent.first_name} {viewStudent.last_name}
                    </p>
                  </div>
                  <div>
                    <Label>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô</Label>
                    <p className="text-sm">{viewStudent.nickname || "-"}</p>
                  </div>
                  <div>
                    <Label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</Label>
                    <p className="text-sm">{viewStudent.phone || "-"}</p>
                  </div>
                  <div>
                    <Label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</Label>
                    <p className="text-sm">{viewStudent.email || "-"}</p>
                  </div>
                  <div>
                    <Label>‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î</Label>
                    <p className="text-sm">
                      {viewStudent.birth_date ? new Date(viewStudent.birth_date).toLocaleDateString("th-TH") : "-"}
                    </p>
                  </div>
                  <div>
                    <Label>‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Label>
                    <p className="text-sm">{viewStudent.current_grade || "-"}</p>
                  </div>
                  <div className="col-span-2">
                    <Label>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</Label>
                    <p className="text-sm">{viewStudent.address || "-"}</p>
                  </div>
                </div>
              </div>

              {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á */}
              <div className="space-y-4">
                <h3 className="text-lg font-medium">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á</h3>
                {viewStudent.parents?.map((parent) => (
                  <div key={parent.id} className="border rounded-lg p-4">
                    <h4 className="font-medium mb-2">{parent.parent_type === "father" ? "‡∏ö‡∏¥‡∏î‡∏≤" : "‡∏°‡∏≤‡∏£‡∏î‡∏≤"}</h4>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <Label>‡∏ä‡∏∑‡πà‡∏≠</Label>
                        <p>
                          {parent.first_name} {parent.last_name}
                        </p>
                      </div>
                      <div>
                        <Label>‡∏≠‡∏≤‡∏ä‡∏µ‡∏û</Label>
                        <p>{parent.occupation || "-"}</p>
                      </div>
                      <div>
                        <Label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</Label>
                        <p>{parent.workplace || "-"}</p>
                      </div>
                      <div>
                        <Label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</Label>
                        <p>{parent.phone || "-"}</p>
                      </div>
                      <div>
                        <Label>‡πÑ‡∏≠‡∏î‡∏µ‡πÑ‡∏•‡∏ô‡πå</Label>
                        <p>{parent.line_id || "-"}</p>
                      </div>
                      <div>
                        <Label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</Label>
                        <p>{parent.email || "-"}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */}
              {viewStudent.student_preferences && (
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</h3>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <Label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1</Label>
                      <p>{viewStudent.student_preferences.preferred_school_1 || "-"}</p>
                    </div>
                    <div>
                      <Label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 2</Label>
                      <p>{viewStudent.student_preferences.preferred_school_2 || "-"}</p>
                    </div>
                    <div>
                      <Label>‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</Label>
                      <p>{viewStudent.student_preferences.branches?.name || "-"}</p>
                    </div>
                    <div>
                      <Label>‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏° PDPA</Label>
                      <p>{viewStudent.student_preferences.pdpa_consent ? "‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°" : "‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°"}</p>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsViewDialogOpen(false)}>
              ‡∏õ‡∏¥‡∏î
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Edit Student Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</DialogTitle>
            <DialogDescription>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á</DialogDescription>
          </DialogHeader>
          <form action={handleEditStudent}>
            <div className="grid gap-6 py-4">
              {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô */}
              <div className="space-y-4">
                <h3 className="text-lg font-medium">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h3>
                <Separator />
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="edit-first_name">‡∏ä‡∏∑‡πà‡∏≠</Label>
                    <Input
                      id="edit-first_name"
                      name="first_name"
                      defaultValue={editStudent?.first_name}
                      placeholder="‡∏ä‡∏∑‡πà‡∏≠"
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="edit-last_name">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</Label>
                    <Input
                      id="edit-last_name"
                      name="last_name"
                      defaultValue={editStudent?.last_name}
                      placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="edit-nickname">‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô</Label>
                    <Input
                      id="edit-nickname"
                      name="nickname"
                      defaultValue={editStudent?.nickname || ""}
                      placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="edit-phone">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</Label>
                    <Input id="edit-phone" name="phone" defaultValue={editStudent?.phone || ""} placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£" />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="edit-email">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</Label>
                    <Input
                      id="edit-email"
                      name="email"
                      type="email"
                      defaultValue={editStudent?.email || ""}
                      placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="edit-current_grade">‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Label>
                    <Select name="current_grade" defaultValue={editStudent?.current_grade || ""}>
                      <SelectTrigger>
                        <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="p1">‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 1</SelectItem>
                        <SelectItem value="p2">‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 2</SelectItem>
                        <SelectItem value="p3">‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 3</SelectItem>
                        <SelectItem value="p4">‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 4</SelectItem>
                        <SelectItem value="p5">‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 5</SelectItem>
                        <SelectItem value="p6">‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 6</SelectItem>
                        <SelectItem value="m1">‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 1</SelectItem>
                        <SelectItem value="m2">‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 2</SelectItem>
                        <SelectItem value="m3">‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 3</SelectItem>
                        <SelectItem value="m4">‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 4</SelectItem>
                        <SelectItem value="m5">‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 5</SelectItem>
                        <SelectItem value="m6">‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 6</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2 col-span-2">
                    <Label htmlFor="edit-address">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</Label>
                    <Input
                      id="edit-address"
                      name="address"
                      defaultValue={editStudent?.address || ""}
                      placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
                    />
                  </div>
                </div>
              </div>

              {connectionMode === "offline" && (
                <div className="text-center text-sm text-blue-600 bg-blue-50 p-3 rounded">
                  üí° ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå: ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                </div>
              )}
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setIsEditDialogOpen(false)}>
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </Button>
              <Button type="submit">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Reset Password Dialog */}
      <Dialog open={isResetPasswordDialogOpen} onOpenChange={setIsResetPasswordDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</DialogTitle>
            <DialogDescription>
              ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "{resetPasswordStudent?.first_name} {resetPasswordStudent?.last_name}"
            </DialogDescription>
          </DialogHeader>
          <form action={handleResetPassword}>
            <div className="grid gap-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="new_password">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ï‡∏±‡∏ß)</Label>
                <Input
                  id="new_password"
                  name="new_password"
                  type="password"
                  placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"
                  required
                  minLength={10}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="confirm_password">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</Label>
                <Input
                  id="confirm_password"
                  name="confirm_password"
                  type="password"
                  placeholder="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"
                  required
                  minLength={10}
                />
              </div>
              {connectionMode === "offline" && (
                <div className="text-center text-sm text-blue-600 bg-blue-50 p-2 rounded">
                  üí° ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå: ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                </div>
              )}
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setIsResetPasswordDialogOpen(false)}>
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </Button>
              <Button type="submit">‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Delete Student Confirmation Dialog */}
      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</DialogTitle>
            <DialogDescription>
              ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô "{deleteStudent?.first_name} {deleteStudent?.last_name}"?
              <br />
              ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              {connectionMode === "offline" && (
                <span className="block mt-2 text-blue-600">üí° ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå: ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</span>
              )}
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDeleteDialogOpen(false)}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button variant="destructive" onClick={handleDeleteStudent}>
              ‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
