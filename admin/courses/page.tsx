"use client"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { ArrowLeft, Plus, Edit, Trash2 } from "lucide-react"
import { getSession, logout } from "@/lib/auth"
import { DatabaseService } from "@/lib/database-service"
import { useToast } from "@/hooks/use-toast"

interface Course {
  id: string
  name: string
  description: string | null
  grade_level: string | null
  total_sessions: number
  price: number
  created_at: string
}

interface Schedule {
  id: string
  course_id: string
  branch_id: string
  day_of_week: number
  start_time: string
  end_time: string
  branches: {
    name: string
  }
}

export default function CoursesPage() {
  const [courses, setCourses] = useState<Course[]>([])
  const [schedules, setSchedules] = useState<Schedule[]>([])
  const [loading, setLoading] = useState(true)
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false)
  const [editCourse, setEditCourse] = useState<Course | null>(null)
  const [deleteCourse, setDeleteCourse] = useState<Course | null>(null)
  const [deleteSchedule, setDeleteSchedule] = useState<Schedule | null>(null)
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)
  const [isDeleteScheduleDialogOpen, setIsDeleteScheduleDialogOpen] = useState(false)
  const [connectionMode, setConnectionMode] = useState<string>("checking")
  const router = useRouter()
  const { toast } = useToast()

  const dayNames = ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå"]

  useEffect(() => {
    async function checkAuthAndFetchData() {
      const session = getSession()

      if (!session) {
        router.push("/")
        return
      }

      if (session.role === "student") {
        router.push("/dashboard")
        return
      }

      // Initialize database service
      await DatabaseService.initialize()
      setConnectionMode(DatabaseService.getConnectionMode())

      await fetchCourses()
      await fetchSchedules()
    }

    checkAuthAndFetchData()
  }, [router])

  async function fetchCourses() {
    try {
      console.log("üîç Fetching courses...")
      const { data, error } = await DatabaseService.getCourses()

      if (error) {
        console.error("Error fetching courses:", error)
        toast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏î‡πâ",
          variant: "destructive",
        })
        return
      }

      console.log("üìö Courses fetched:", data?.length || 0)
      setCourses(data || [])
    } catch (error) {
      console.error("Exception fetching courses:", error)
      toast({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™",
        variant: "destructive",
      })
    }
  }

  async function fetchSchedules() {
    try {
      console.log("üîç Fetching schedules...")
      const { data, error } = await DatabaseService.getSchedules()

      if (error) {
        console.error("Error fetching schedules:", error)
        return
      }

      console.log("üìÖ Schedules fetched:", data?.length || 0)
      setSchedules(data || [])
    } catch (error) {
      console.error("Exception fetching schedules:", error)
    } finally {
      setLoading(false)
    }
  }

  async function handleAddCourse(formData: FormData) {
    try {
      const courseData = {
        name: formData.get("name") as string,
        description: formData.get("description") as string,
        grade_level: formData.get("grade_level") as string,
        total_sessions: Number.parseInt(formData.get("total_sessions") as string),
        price: Number.parseFloat(formData.get("price") as string),
      }

      const { error } = await DatabaseService.addCourse(courseData)

      if (error) {
        toast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏î‡πâ",
          variant: "destructive",
        })
        return
      }

      toast({
        title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: connectionMode === "offline" ? "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á)" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß",
      })

      setIsAddDialogOpen(false)
      await fetchCourses()
    } catch (error) {
      console.error("Error adding course:", error)
    }
  }

  async function handleEditCourse(formData: FormData) {
    if (!editCourse) return

    try {
      const updates = {
        name: formData.get("name") as string,
        description: formData.get("description") as string,
        grade_level: formData.get("grade_level") as string,
        total_sessions: Number.parseInt(formData.get("total_sessions") as string),
        price: Number.parseFloat(formData.get("price") as string),
      }

      const { error } = await DatabaseService.updateCourse(editCourse.id, updates)

      if (error) {
        toast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏î‡πâ",
          variant: "destructive",
        })
        return
      }

      toast({
        title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: connectionMode === "offline" ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏•‡πâ‡∏ß (‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á)" : "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏•‡πâ‡∏ß",
      })

      setIsEditDialogOpen(false)
      setEditCourse(null)
      await fetchCourses()
    } catch (error) {
      console.error("Error editing course:", error)
    }
  }

  async function handleDeleteCourse() {
    if (!deleteCourse) return

    try {
      const { error } = await DatabaseService.deleteCourse(deleteCourse.id)

      if (error) {
        toast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏î‡πâ",
          variant: "destructive",
        })
        return
      }

      toast({
        title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: connectionMode === "offline" ? "‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏•‡πâ‡∏ß (‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á)" : "‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏•‡πâ‡∏ß",
      })

      setIsDeleteDialogOpen(false)
      setDeleteCourse(null)
      await fetchCourses()
      await fetchSchedules()
    } catch (error) {
      console.error("Error deleting course:", error)
    }
  }

  async function handleDeleteSchedule() {
    if (!deleteSchedule) return

    try {
      const { error } = await DatabaseService.deleteSchedule(deleteSchedule.id)

      if (error) {
        toast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ",
          variant: "destructive",
        })
        return
      }

      toast({
        title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: connectionMode === "offline" ? "‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á)" : "‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
      })

      setIsDeleteScheduleDialogOpen(false)
      setDeleteSchedule(null)
      await fetchSchedules()
    } catch (error) {
      console.error("Error deleting schedule:", error)
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
      </div>
    )
  }

  return (
    <div className="container mx-auto p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-4">
          <Link href="/admin">
            <Button variant="outline" size="sm">
              <ArrowLeft className="h-4 w-4 mr-2" />
              ‡∏Å‡∏•‡∏±‡∏ö
            </Button>
          </Link>
          <h1 className="text-2xl font-bold">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™</h1>
          <Badge variant={connectionMode === "offline" ? "outline" : "default"}>
            {connectionMode === "offline" ? "üì± ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå" : "‚úÖ ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå"}
          </Badge>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" onClick={logout}>
            ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
          </Button>
        </div>
      </div>

      <div className="grid gap-6">
        {/* Courses Section */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</CardTitle>
                <CardDescription>
                  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£: {courses.length} ‡∏Ñ‡∏≠‡∏£‡πå‡∏™
                  {connectionMode === "offline" && " (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á)"}
                </CardDescription>
              </div>
              <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
                <DialogTrigger asChild>
                  <Button>
                    <Plus className="h-4 w-4 mr-2" />
                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÉ‡∏´‡∏°‡πà
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÉ‡∏´‡∏°‡πà</DialogTitle>
                    <DialogDescription>‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà</DialogDescription>
                  </DialogHeader>
                  <form action={handleAddCourse}>
                    <div className="grid gap-4 py-4">
                      <div className="space-y-2">
                        <Label htmlFor="name">‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™</Label>
                        <Input id="name" name="name" placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏°.3" required />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="description">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</Label>
                        <Input id="description" name="description" placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™" />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="grade_level">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô</Label>
                        <Input id="grade_level" name="grade_level" placeholder="‡πÄ‡∏ä‡πà‡∏ô m3, m6" />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="total_sessions">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Label>
                        <Input id="total_sessions" name="total_sessions" type="number" placeholder="30" required />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="price">‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)</Label>
                        <Input id="price" name="price" type="number" step="0.01" placeholder="12000" required />
                      </div>
                      {connectionMode === "offline" && (
                        <div className="text-center text-sm text-blue-600 bg-blue-50 p-2 rounded">
                          üí° ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå: ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                        </div>
                      )}
                    </div>
                    <DialogFooter>
                      <Button type="submit">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™</Button>
                    </DialogFooter>
                  </form>
                </DialogContent>
              </Dialog>
            </div>
          </CardHeader>
          <CardContent>
            {courses.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</div>
            ) : (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™</TableHead>
                    <TableHead>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô</TableHead>
                    <TableHead>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</TableHead>
                    <TableHead>‡∏£‡∏≤‡∏Ñ‡∏≤</TableHead>
                    <TableHead>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á</TableHead>
                    <TableHead>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {courses.map((course) => (
                    <TableRow key={course.id}>
                      <TableCell className="font-medium">{course.name}</TableCell>
                      <TableCell>
                        {course.grade_level ? <Badge variant="secondary">{course.grade_level}</Badge> : "-"}
                      </TableCell>
                      <TableCell>{course.total_sessions} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</TableCell>
                      <TableCell>{course.price.toLocaleString()} ‡∏ö‡∏≤‡∏ó</TableCell>
                      <TableCell>{new Date(course.created_at).toLocaleDateString("th-TH")}</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => {
                              setEditCourse(course)
                              setIsEditDialogOpen(true)
                            }}
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => {
                              setDeleteCourse(course)
                              setIsDeleteDialogOpen(true)
                            }}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            )}
          </CardContent>
        </Card>

        {/* Schedules Section */}
        <Card>
          <CardHeader>
            <CardTitle>‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</CardTitle>
            <CardDescription>
              ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {schedules.length} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á
              {connectionMode === "offline" && " (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á)"}
            </CardDescription>
          </CardHeader>
          <CardContent>
            {schedules.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</div>
            ) : (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>‡∏Ñ‡∏≠‡∏£‡πå‡∏™</TableHead>
                    <TableHead>‡∏™‡∏≤‡∏Ç‡∏≤</TableHead>
                    <TableHead>‡∏ß‡∏±‡∏ô</TableHead>
                    <TableHead>‡πÄ‡∏ß‡∏•‡∏≤</TableHead>
                    <TableHead>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {schedules.map((schedule) => {
                    const course = courses.find((c) => c.id === schedule.course_id)
                    return (
                      <TableRow key={schedule.id}>
                        <TableCell className="font-medium">{course?.name || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™"}</TableCell>
                        <TableCell>{schedule.branches?.name || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤"}</TableCell>
                        <TableCell>
                          <Badge variant="outline">{dayNames[schedule.day_of_week]}</Badge>
                        </TableCell>
                        <TableCell>
                          {schedule.start_time} - {schedule.end_time}
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                setDeleteSchedule(schedule)
                                setIsDeleteScheduleDialogOpen(true)
                              }}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    )
                  })}
                </TableBody>
              </Table>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Edit Course Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏£‡πå‡∏™</DialogTitle>
            <DialogDescription>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£</DialogDescription>
          </DialogHeader>
          <form action={handleEditCourse}>
            <div className="grid gap-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="edit-name">‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™</Label>
                <Input
                  id="edit-name"
                  name="name"
                  defaultValue={editCourse?.name}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏°.3"
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="edit-description">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</Label>
                <Input
                  id="edit-description"
                  name="description"
                  defaultValue={editCourse?.description || ""}
                  placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="edit-grade_level">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô</Label>
                <Input
                  id="edit-grade_level"
                  name="grade_level"
                  defaultValue={editCourse?.grade_level || ""}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô m3, m6"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="edit-total_sessions">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Label>
                <Input
                  id="edit-total_sessions"
                  name="total_sessions"
                  type="number"
                  defaultValue={editCourse?.total_sessions}
                  placeholder="30"
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="edit-price">‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)</Label>
                <Input
                  id="edit-price"
                  name="price"
                  type="number"
                  step="0.01"
                  defaultValue={editCourse?.price}
                  placeholder="12000"
                  required
                />
              </div>
              {connectionMode === "offline" && (
                <div className="text-center text-sm text-blue-600 bg-blue-50 p-2 rounded">
                  üí° ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå: ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                </div>
              )}
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setIsEditDialogOpen(false)}>
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </Button>
              <Button type="submit">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Delete Course Confirmation Dialog */}
      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™</DialogTitle>
            <DialogDescription>
              ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™ "{deleteCourse?.name}"?
              <br />
              ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ
              {connectionMode === "offline" && (
                <span className="block mt-2 text-blue-600">üí° ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå: ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</span>
              )}
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDeleteDialogOpen(false)}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button variant="destructive" onClick={handleDeleteCourse}>
              ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Schedule Confirmation Dialog */}
      <Dialog open={isDeleteScheduleDialogOpen} onOpenChange={setIsDeleteScheduleDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</DialogTitle>
            <DialogDescription>
              ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ?
              <br />
              ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ
              {connectionMode === "offline" && (
                <span className="block mt-2 text-blue-600">üí° ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå: ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</span>
              )}
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDeleteScheduleDialogOpen(false)}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button variant="destructive" onClick={handleDeleteSchedule}>
              ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
